[
	{
		"id": 1,
		"name": "Cloudflare Collection",
		"summary": "Making it easier for developers and engineers to automate the Cloudflare platform",
		"slug": "cloudflare-collection",
		"photoUrl": "/cloudflare.svg",
		"description": "<p>Why:</p><ul><li>We want to make it easier for developers and engineers to automate the Cloudflare platform</li></ul><p>How:</p><ul><li>By creating an Ansible collection with modules for interacting with Cloudflare's API</li><li>So developers can use a clean and simple pattern to describe how they want their Cloudflare account to funtion</li><li>Also, getting the advantages of Ansible's features<ul><li>Logging</li><li>Idempotence<ul><li>Don't do something unless it needs to be done</li></ul></li><li>Declarative syntax<ul><li>Tell me what you want the end results to look like and I'll get you there</li></ul></li><li>Check Mode<ul><li>Tell me what you would do without actually doing it (\"dry run\")</li></ul></li></ul></li></ul><p>Context:</p><ul><li>Ansible is a popular, open-source tool that is used to manage hosts, applications, and 3rd party platforms<ul><li>Basically, a way to automate the infrastructure required to run your code</li></ul></li><li>Cloudflare is a platform that helps you manage<ul><li>DNS records<ul><li>The service that lets you use a domain name like \"my.website.com\" to visit a server with an IP address like 111.76.164.3)</li></ul></li><li>Reverse Proxies<ul><li>A server that \"stands in between\" the server that hosts your application</li><li>Benefits include protecting your server from attacks, providing free and auto-renewable certificates for a securet connection (TLS), and masking or \"hiding\" the actual IP address used by your server</li></ul></li><li>Tunnels<ul><li>Somewhat of an alternative solution to a Reverse Proxy, this technology makes it so your server can still answer requests without it being possible to reach the server directly from the outside internet</li><li>It does this by using Cloudflare to \"answer\" requests from outside users while your server reaches out to Cloudflare to get the most recent requests and handle them.</li><li>A \"Don't call us, we'll call you\" type of approach</li></ul></li></ul></li></ul><p>Code:</p><ul><li><a href=\"https://github.com/codekaizen-github/cloudflare-ansible-collection\">https://github.com/codekaizen-github/cloudflare-ansible-collection</a></li></ul>"
	},
	{
		"id": 2,
		"name": "Docker Collection",
		"summary": "Adding features to the existing Ansible collection that is used to directly manage Docker containers",
		"slug": "docker-collection",
		"photoUrl": "/docker.svg",
		"description": "<p>Why:</p><ul><li>We want to add features to the existing Ansible collection that is used to directly manage Docker containers</li><li>So that developers can use Ansible to take full advantage of the features that Docker offers</li></ul><p>How:</p><ul><li>By adding new modules to the existing community Ansible Docker collection</li><li>Specifically, we are working on adding a module to copy files out of a Docker container and onto the filesystem of the host that the container is running on</li></ul><p>Context:</p><ul><li>Ansible is a popular, open-source tool that is used to manage hosts, applications, and 3rd party platforms<ul><li>Basically, a way to automate the infrastructure required to run your code</li></ul></li><li>Docker is a popular, open-source tool that is used to run code inside of \"containers\"<ul><li>Containers are a way to isolate and encapsulate code so it can be easily moved to new platforms</li><li>Containers can also be scaled to handle larger workloads by creating multiple instances of the same container description, or \"image\"</li></ul></li></ul><p>Code:</p><ul><li><a href=\"https://github.com/codekaizen-github/community.docker\">https://github.com/codekaizen-github/community.docker</a></li></ul>"
	},
	{
		"id": 3,
		"name": "Portainer Collection",
		"summary": "Making it easier for developers and engineers to automate the Portainer application",
		"slug": "portainer-collection",
		"photoUrl": "/portainer.svg",
		"description": "<p>Why:</p><ul><li>We want to make it easier for developers and engineers to automate the Portainer application</li></ul><p>How:</p><ul><li>By creating an Ansible collection with modules for interacting with Portainer's API</li><li>So developers can use a clean and simple pattern to describe how they want their Portainer application to funtion</li><li>Also, getting the advantages of Ansible's features<ul><li>Logging</li><li>Idempotence<ul><li>Don't do something unless it needs to be done</li></ul></li><li>Declarative syntax<ul><li>Tell me what you want the end results to look like and I'll get you there</li></ul></li><li>Check Mode<ul><li>Tell me what you would do without actually doing it (\"dry run\")</li></ul></li></ul></li></ul><p>Context:</p><ul><li>Ansible is a popular, open-source tool that is used to manage hosts, applications, and 3rd party platforms<ul><li>Basically, a way to automate the infrastructure required to run your code</li></ul></li><li>Portainer is a popular, open-source tool that is used to manage Docker containers across multiple hosts<ul><li>It provides a web UI where you can view which hosts are in your \"system\"</li><li>From this UI, you can manage any of your hosts - starting and stopping containers</li></ul></li></ul><p>Code: </p><ul><li><a href=\"https://github.com/codekaizen-github/portainer-ansible-collection\">https://github.com/codekaizen-github/portainer-ansible-collection</a></li></ul>"
	},
	{
		"id": 4,
		"name": "Liker",
		"summary": "Proof of concept for real-time, distributed computing",
		"slug": "liker",
		"photoUrl": "/liker.svg",
		"description": "<p>Why:</p><ul><li>This project is a proof of concept for several ideas related to distributed computing<ul><li>Total Order Broadcast (<a href=\"https://en.wikipedia.org/wiki/Atomic_broadcast\" target=\"_blank\">Atomic Broadcast</a>)</li><li><a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\" target=\"_blank\">Event Sourcing</a></li><li>Using Websockets to \"push\" real-time event data to web clients</li><li>OAuth 2.0 authentication and authorization</li></ul></li></ul><p>How:</p><ul><li>Create an application where users can<ul><li>Log in using Google Single Sign On (SSO)</li><li>Join a real-time \"game\" where they can compete with other users to increment a counter to a set number</li><li>View real-time updates as other users influence the game's state</li><li>Write to a single \"event log\" of append-only events</li><li>Read from multiple replicas of the application data; to simulate real-world performance concerns</li></ul></li></ul><p>Context:</p><ul><li>This is based on theories outlined in the book <i><a href=\"https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321\" target=\"_blank\">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></i></li></ul><p>Code:</p><ul><li><a href=\"https://github.com/codekaizen-github/liker-frontend\">https://github.com/codekaizen-github/liker-frontend</a></li><li><a href=\"https://github.com/codekaizen-github/liker-event-log\">https://github.com/codekaizen-github/liker-event-log</a></li><li><a href=\"https://github.com/codekaizen-github/liker-stream-processor-deduplicator\">https://github.com/codekaizen-github/liker-stream-processor-deduplicator</a></li><li><a href=\"https://github.com/codekaizen-github/liker-stream-processor-user-events\">https://github.com/codekaizen-github/liker-stream-processor-user-events</a></li><li><a href=\"https://github.com/codekaizen-github/liker-stream-processor-truth-sayer\">https://github.com/codekaizen-github/liker-stream-processor-truth-sayer</a></li></ul>"
	}
]
